To recap the video, the following steps happen:
HTML is received
HTML tags are converted to tokens
tokens are converted to Nodes
Nodes are converted to the DOM
When you request a website, no matter what backend language is powering that website, it will respond with HTML. The browser receives a stream of HTML. The bytes are run through a complicated (but fully documented) parsing process that determines the different characters (e.g. the start tag character <, an attribute like href, a closing angle bracket like >). After parsing has occurred, a process called tokenization. Tokenization takes one character at a time and builds up tokens. The tokens are:
DOCTYPE
start tag
end tag
comment
character
end-of-file
Let's take a break for a second. At this state, the browser has received the bytes that've been sent by a server. The browser has converted the bytes to tags and has read through the tags to create a list of

This list of tokens then goes through the tree construction stage. The output of this stage is a tree-like structure - this is the DOM!
I want to point out two important quotes that Illya said in the video:
a tree structure that captures the content and properties of the HTML and all the relationships between the nodes
the DOM is the full, parsed representation of the HTML
So the DOM is a model (representation) of the relationships and attributes of the HTML document that was received. Remember that DOM stands for "Document Object Model". Something that I've found to be true as I've been learning is that to break something down, just read the thing backwards:
Document Object Model
...would become‚Ä¶
Object Model of the Document!

The document object is provided by the browser and is a representation of the HTML document. This object is not provided by the JavaScript language. ECMAScript is the language specification that JavaScript is based on, and it only references the document object model in one place, in its "Global Object" section:
In addition to the properties defined in this specification the global object may have additional host defined properties. This may include a property whose value is the global object itself; for example, in the HTML document object model the window property of the global object is the global object itself. (source)

Basically, this says that the document object is not part of JavaScript, but is expected to already exist and be freely accessible to JavaScript code.
The DOM is standardized by the W3C. There are a number of specifications that make up the DOM, here are few:
Core Specification
Events Specification
Style Specification
Validation Specification
Load and Save Specification
To see the full list of DOM specs, check out the standard at: https://www.w3.org/standards/techs/dom#w3c_alln

The DOM stands for "Document Object Model" and is a tree-like structure that is a representation of the HTML document, the relationship between elements, and contains the content and properties of the elements.
The DOM is not:
part of the JavaScript language
The DOM is:
constructed from the browser
is globally accessible by JavaScript code using the document object
The DOM is used all of the time and is what we'll be using throughout this course!
Further Research
DOM Introduction
Section 8.2 Parsing HTML documents from the W3C's HTML Documentation
DOM Specification on W3C
HTML Document Object Model mentioned in the ECMAScript Specification - the language specification used by JavaScript

You're probably used to seeing (and writing!) a lot of this kinda stuff:
.header {

.header {
    max-width: 100%;
    margin-left: auto;
    margin-right: auto
}

.header.header--clone .header__navbar {
    height: 4.5rem
}

.header.header--stick {
    top: 0;
    background-color: #ffffff;
    z-index: 8000;
    box-shadow: 0px 1px 2px rgba(0,0,0,0.1)
}

.header__navbar {
    max-width: 73.75rem;
    margin-left: auto;
    margin-right: auto;
    height: 4.5rem;
    padding: 0 1.5em
}

..you know, CSS! The skills that you've learned writing CSS will help you in this section!
With this in mind, let's make sure that you're comfortable answering the following questions.

answer: #footer {...} using the hastag
In CSS, you need to use the # at the beginning of the selector to target an element by its ID.

Which of the following will style an element by its class?
answer: .left-nav {...}  or .id {....}

In CSS, you need to use the . (the period!) at the beginning of the selector to target elements by their class.

Which of the following will style an element by targeting the tag name?
answer:  p{...}
In CSS, you target specific elements by their tag name.

So this was a quick review on how to select elements by ID, class, and tag. Believe it or not, being able to select HTML elements this way is actually going to be a vital skill in this section where we learn how to access page elements using JavaScript and the DOM!
If you struggled a little bit with this section, perhaps you should do a quick review of CSS by reviewing the HTML and CSS course.
Alrighty - let's get right to it and let the fun begin! üôåüèº

Let's take a look at how we can use JavaScript and the DOM to gain access to specific elements using their ID attribute.
Remember the document object from the previous section? Well, we're going to start using it! Remember the document object is an object, just like a JavaScript object. This means it has key/value pairs. Some of the values are just pieces of data, while others are functions (also known as methods!) that provide some type of functionality. The first DOM method that we'll be looking at is the .getElementById() method:

document.getElementById(); -If we ran the code above in the console, we wouldn't get anything, because we did not tell it the ID of any element to get! We need to pass a string to .getElementById() of the ID of the element that we want it to find and subsequently return to us:
document.getElementById('footer');

One thing to notice right off the bat, is that we're passing 'footer', not '#footer'. It already knows that it's searching for an ID (its name _is_ "getElementById", for a reason!).

If you'd like to read more about this method, check out its documentation page on MDN: https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById

To recap what we just did:
we opened the DevTools for the page we were looking at
we switched to the Console pane
we ran document.getElementById('content'); on the console
Running this code cause the document object to search through its entire tree-like structure for the element that has an ID of "content".

n this section, we learned how to select a DOM element by its ID:
.getElementById()
There are a couple of important things to keep in mind about this method:
it is called on the document object
it returns a single item

/ select the element with the ID "callout"
document.getElementById('callout');


As I'm sure you remember from learning both HTML structure and CSS styling, an ID should be unique - meaning two or more elements should never have the same ID. Since IDs are unique, and since there will be only one element in the HTML with that ID, document.getElementById() will only ever return at most one element. So how would we select multiple DOM elements?
The next two DOM methods that we'll be looking at that both return multiple elements are:
.getElementsByClassName()
.getElementsByTagName()
Accessing Elements By Their Class
The first method we'll look at is .getElementsByClassName():

document.getElementsByClassName();

imilarly to .getElementById(), if we ran the code above in the console, we wouldn't get anything, because we did not tell it the class to search for! Also just like .getElementById(), .getElementsByClassName() is expecting that we call it with a string of the class we want it to search for/return:

document.getElementsByClassName('brand-color');


so STEPS TO TAKE TO LOOK AT THIS IN CONSOLE:

open up web browser page -
1. click on whatever element on the page you want to inspect
2. open the console to the element page - you will see what you clicked on highlight
3. find the content that is shows CLASS Element; example
class='highlight-spanned'
3. in console below type ;
document.getElementsByClassName('highlight-spanned');

this will return what it finds ;
4. click the little arrow key to open up and see what it finds


Beware of the S!
I know we haven't looked at .getElementsByTagName() just yet, but there's something different about .getElementById() compared with both .getElementsByClassName() and .getElementsByTagName() that I want to point out because it can be easy to miss; both .getElementsByClassName() and .getElementsByTagName() have an extra "s" in their name.
The method's name is .getElementsByClassName(), not .getElementByClassName(). Notice the word right in the middle, it's "Elements" not "Element". If you think about it, this actually makes a lot of sense! Since both .getElementsByClassName() and .getElementsByTagName() could return multiple items, their method names tell us that directly. Now compare this with .getElementById() that will only ever return at most one element. Its name has the singular "Element" in it.

document.getElementByClassName('highlight-spanned');

This code above will not work, because there is no DOM method .getElementByClassName() (with singular "Element"). -  IT MISSING THE S in Elements

After looking at both .getElementById() and .getElementsByClassName(), the new .getElementsByTagName() method should seem quite easy on the eyes:

document.getElementsByTagName('p');


Selecting Multiple Elements At Once
As I'm sure you remember from learning both HTML structure and CSS styling, an ID should be unique - meaning two or more elements should never have the same ID. Since IDs are unique, and since there will be only one element in the HTML with that ID, document.getElementById() will only ever return at most one element. So how would we select multiple DOM elements?
The next two DOM methods that we'll be looking at that both return multiple elements are:
.getElementsByClassName()
.getElementsByTagName()
Accessing Elements By Their Class
The first method we'll look at is .getElementsByClassName():
document.getElementsByClassName();
Similarly to .getElementById(), if we ran the code above in the console, we wouldn't get anything, because we did not tell it the class to search for! Also just like .getElementById(), .getElementsByClassName() is expecting that we call it with a string of the class we want it to search for/return:
document.getElementsByClassName('brand-color');
If you'd like to read more about this method, check out its documentation page on MDN: https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
Let's use this MDN documentation page to try out using this method.

Beware of the S!
I know we haven't looked at .getElementsByTagName() just yet, but there's something different about .getElementById() compared with both .getElementsByClassName() and .getElementsByTagName() that I want to point out because it can be easy to miss; both .getElementsByClassName() and .getElementsByTagName() have an extra "s" in their name.
The method's name is .getElementsByClassName(), not .getElementByClassName(). Notice the word right in the middle, it's "Elements" not "Element". If you think about it, this actually makes a lot of sense! Since both .getElementsByClassName() and .getElementsByTagName() could return multiple items, their method names tell us that directly. Now compare this with .getElementById() that will only ever return at most one element. Its name has the singular "Element" in it.
I just wanted to point this out because I've been bitten by that missing "s" many-a-time when running code like:
document.getElementByClassName('highlight-spanned');
This code above will not work, because there is no DOM method .getElementByClassName() (with singular "Element").
Accessing Elements By Their Tag
After looking at both .getElementById() and .getElementsByClassName(), the new .getElementsByTagName() method should seem quite easy on the eyes:
document.getElementsByTagName('p');
Let's use this MDN documentation page to try out using this method: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

Question 1 of 3
Which of the following would correctly select all elements with class: 'splort'?
document.getElementsByClassName('splort');

document.getElementsByClassname('splort');

document.getElementsByClassName('.splort');

document.getElementByClassName('splort');
Submit


Write the DOM code to select all <article> elements.

Submit


Write the DOM code to select all elements with class: fancy-footer.

document.getElementsByClassName('fancy-footer');
Reset
What's Returned?

We just saw that .getElementsByClassName() returns an array-like data structure of elements. But what exactly _is_ an element?
In the next section, we'll take the plunge and look at Elements and Nodes.

In the next section, we'll take the plunge and look at Elements and Nodes.
Selecting Multiple Elements At Once Recap
In this section, we learned two ways to select multiple DOM elements:
.getElementsByClassName()
.getElementsByTagName()
There are a few important things to keep in mind about these two methods:
both methods use the document object
both return multiple items
the list that's returned is not an array

/ select all elements that have the class "accent-color"
document.getElementsByClassName('accent-color');

// select all "span" elements
document.getElementsByTagName('span');


HOW IT LOOKING AT THE DATA IN Console
So to reiterate the process, it's:
characters
tags
tokens
nodes
DOM
But what _is_ a "node", exactly?

‚ö†Ô∏è Interface vs User Interface ‚ö†Ô∏è
The word "interface" might be an unclear word right now, and that's ok. I do want to make sure that you're not connecting this "interface" with a user interface (UI) or a graphical user interface (GUI).
Our use of "interface" is not related to either a UI or a GUI. Our use of "interface" is a technical, computer science word for a list of properties and methods that are inherited.
Node (with a capital "N"!) is a blueprint that contains information about all of the properties and methods for real nodes (with a lowercase "n"!). If you're not used to them, the words "interface", "property", and "method" can be kind of cryptic at first. Just remember that:
interface = blueprint
properties = data
methods = functionality
Let's check out Node on MDN: Node Interface on MDN


So the Node Interface is a blueprint for all of the properties (data) and methods (functionality) that every real node has after it's been created. Now, the Node Interface has a lot of properties and methods, but it's not very specific...I mean, what _is_ a node???
Just like "blueprint for a Building" is not as specific as "blueprint for a house" or "blueprint for a skyscraper". These are more-specific blueprints. And these more-specific blueprints would probably have their own properties and methods that are specific to just houses or just skyscrapers.
This brings us to the "Element Interface".
Element Interface
Just like the Node Interface, the Element Interface is a blueprint for creating elements: Element Interface on MDN
One really important thing about the Element Interface is that it is a descendent of the Node Interface.

One really important thing about the Element Interface is that it is a descendent of the Node Interface.



Since Element is pointing at Node, this indicates that the Element Interface inherits all of the Node Interface's properties and methods. This means that any element (lowercase "e"!) that was created from the Element Interface is also a descendent from the Node Interface...which means the element (lowercase "e"!) is also a node (lowercase "n"!).
Let's do a little digging around on an element!


Does the .outerHTML property come from the Node Interface or the Element Interface?  -  ANSWER- ElementInterface


Which interface does the .id property come from?
ANSWERT - Element interface

Which interface does the .textContent property come from?
ANSWER Node Interface


o you remember the .getElementsByClassName() method on the document object that we looked at previously? While reviewing the Element interface, you might've noticed that it also has a .getElementsByClassName() method! The Element Interface inherits from the Node Interface, not the Document Interface (yep, there's a Document Interface!). The Element Interface has its own .getElementsByClassName() that does the exact same thing as the one on the document object.
This means that you can use the document object to select an element, then you can call .getElementsByClassName() on that element to receive a list of elements with the class name that are descendents of that specific element!


// selects the DOM element with an ID of "sidebar"
const sidebarElement = document.getElementById('sidebar');

// searches within the "sidebar" element for any elements with a class of "sub-heading"
const subHeadingList = sidebarElement.getElementsByClassName('sub-heading');


To check out all of the different interfaces, check here: Web API Interfaces


ecap
Hopefully this was an enlightening lesson on a number of fronts! You learned about interfaces, properties, and methods; an interface is like a blueprint, properties are like bits of information or data, and methods are functionality.
We also looked at a couple of specific interfaces:
Node Interface
Element Interface
We saw that both of these interfaces have properties and methods. We also saw how the Element Interface inherits all of the properties and methods from the Node interface.
Further Research
Node Interface



We've been looking at the:
.getElementById()
.getElementsByClassName()
and .getElementsByTagName()
Now these DOM methods are standardized. However, not all browsers support every standard. They do now, for these three methods, but there are hundreds of other methods with varying levels of support.
That's why almost every method on MDN has a Browser compatibility table that lists when each browser started supporting that specific method.



Thankfully, all browsers have pretty much aligned to support the official standard.
However, back in the day, that wasn't the case. You had to write different code to perform the same action in different browsers. Then you had to write code to check which browser you were in to run the correct code for that browser. Let me tell you, it was a bit of a nightmare.
Several JavaScript libraries came along to help mitigate these issues. Let's take a brief look at the jQuery library.


Each one of these sets the color to red. The only difference is in the selector; selecting by ID, selecting by class, and selecting by tag. Got it? Good!
You've already learned the DOM methods to select by ID, class, and tag, too:
.document.getElementById()
.document.getElementsByClassName()
.document.getElementsByTagName()
Three different methods that do almost the exact same thing. Wouldn't it be awesome if there were a way to do element selecting similar to how CSS does it?
Wait for it - there is!
#header {
    color: 'red';
}

.header {
    color: 'red';
}

header {
    color: 'red';
}

The querySelector Method
We can use the .querySelector() method to select elements just like we do with CSS. We use the .querySelector() method and pass it a string that's just like a CSS selector:

find and return the element with an ID of "header"
document.querySelector('#header');

// find and return the first element with the class "header"
document.querySelector('.header');

// find and return the first <header> element
document.querySelector('header');

‚ö†Ô∏è .querySelector() Returns A Single Element ‚ö†Ô∏è
I want to point out one potentially tricky thing - the .querySelector() method only returns one element. This makes sense if you use it to search for an element by ID. However, even though .getElementsByClassName() and .getElementsByTagName() both return a list of multiple elements, using .querySelector() with a class selector or a tag selector will still only return the first item it finds.

he querySelectorAll Method
The .querySelector() method returns only one element from the DOM (if it exists). However, there are definitely times when you will want to get a list of all elements with a certain class or all of one type of element (e.g. all <tr> tags). We can use the .querySelectorAll() method to do this!

// find and return a list of elements with the class "header"
document.querySelectorAll('.header');

// find and return a list of <header> elements
document.querySelectorAll('header');

Here's the .querySelectorAll() method on MDN: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll


To obtain a NodeList of all of the <p> elements in the document:
var matches = document.querySelectorAll("p");

This example returns a list of all <div> elements within the document with a class of either note or alert:
var matches = document.querySelectorAll("div.note, div.alert");

Here, we get a list of <p> elements whose immediate parent element is a <div> with the class highlighted and which are located inside a container whose ID is test.
var container = document.querySelector("#test");
var matches = container.querySelectorAll("div.highlighted > p");


This example uses an attribute selector to return a list of the <iframe> elements in the document that contain an attribute named data-src:
var matches = document.querySelectorAll("iframe[data-src]");

Here, an attribute selector is used to return a list of the list items contained within a list whose ID is "userlist" which have a "data-active" attribute whose value is "1":
var container = document.querySelector("#userlist");
var matches = container.querySelectorAll("li[data-active='1']");


The selector methods accept one or more comma-separated selectors to determine what element or elements should be returned. For example, to select all paragraph (p) elements in a document whose CSS class is either warning or note, you can do the following:
var special = document.querySelectorAll( "p.warning, p.note" );
You can also query by ID. For example:
var el = document.querySelector( "#main, #basic, #exclamation" );
After executing the above code, el contains the first element in the document whose ID is one of main, basic, or exclamation.
You may use any CSS selectors with the querySelector() and querySelectorAll() methods.



you mean descendants, you can use querySelectorAll:
var descendants = theElement.querySelectorAll("*");
All modern browsers, and IE8, have querySelectorAll.
It gives you a NodeList, which is array-like. If you want a true JavaScript array, you can use Array#slice to get it, like this:
var descendants = Array.prototype.slice.call(theElement.querySelectorAll("*"), 0);
Example:


Write the .querySelectorAll() code to find all paragraph elements that are descendents of elements that have the class: articles
answer
document.querySelectorAll('.articles p');


Note: the "list" that is returned by .querySelectorAll() is not a JavaScript list, but another type of object called a NodeList. It has a .forEach() method, but it's not supported by all browsers... W/ a NodeList, you're better off just using a regular for loop:
const allHeaders = document.querySelectorAll('header');
for(let i = 0; i < allHeaders; i++){
    console.dir(allHeaders[i]);
}
querySelectorAll
NodeList

Note: the "list" that is returned by .querySelectorAll() is not a JavaScript list, but another type of object called a NodeList. It has a .forEach() method, but it's not supported by all browsers... W/ a NodeList, you're better off just using a regular for loop:
const allHeaders = document.querySelectorAll('header');
for(let i = 0; i < allHeaders; i++){
    console.dir(allHeaders[i]);
}
querySelectorAll
NodeList

A node of nodeType 1 is an ELEMENT_NODE, whereas a node of nodeType 2 is an ATTRIBUTE_NODE. There are 12 types of nodes (see docs for more details).


So, we know that Node is an Interface... Just like a (child) class can inherit properties and methods from another (parent) class, an interface can inherit from another interace. So, for example, there is the Element Interface, which inherits from the Node Interface. A specific instance of an Element Node is an element class (e.g., class EL), instances of which are objects of that class (e.g., EL objects). ....


Classes and Interfaces in JavaScript
This got me all a bit flustered, so I began reading about classes, interfaces, and objects in JavaScript.
A major takeaway is to remember that the DOM is not JavaScript: it is its own thing, and JavaScript in the browser has a system of dealing with that thing. So, independent of JavaScript, the DOM has DOM interaces, etc.
Another major theme is that, yes, you can technically use design patterns to implement traditional classes and interfaces in JavaScript, but this is through a more-or-less brute force technique known as "Duck Typing." OOP in JavaScript is not traditional OOP; it implements a different approach to OOP called prototype-based OOP. Since this can be alien to developers from traditional OOP backgrounds, some syntactical sugar has been added in ES6 to make class and interface implementation *feel* like traditional OOP (but it is still prototypical OOP underneath the hood




avaScript is a bit confusing for developers experienced in class-based languages (like Java or C++), as it is dynamic and does not provide a class implementation per se (the class keyword is introduced in ES2015, but is syntactical sugar, JavaScript remains prototype-based).
When it comes to inheritance, JavaScript only has one construct: objects. Each object has a private property which holds a link to another object called its prototype. That prototype object has a prototype of its own, and so on until an object is reached with null as its prototype. By definition, null has no prototype, and acts as the final link in this prototype chain.
Nearly all objects in JavaScript are instances of Object which sits on the top of a prototype chain.
While this confusion is often considered to be one of JavaScript's weaknesses, the prototypal inheritance model itself is, in fact, more powerful than the classic model. It is, for example, fairly trivial to build a classic model on top of a prototypal model.


OTE: typeof is an operator that returns the name of the data type that follows it:
typeof "hello" // returns "string"
typeof true // returns "boolean"
typeof [1, 2, 3] // returns "object" (Arrays are a type of object)
typeof function hello() { } // returns "function


Using the umbrella example from the previous video, see if you can follow the example open() method and create the close() method. It's alright if you have trouble at first! We'll go into more detail later in this lesson.

var umbrella = {
  color: "pink",
  isOpen: false,
  open: function() {
    if (umbrella.isOpen === true) {
      return "The umbrella is already opened!";
    } else {
      umbrella.isOpen = true;
      return "Julia opens the umbrella!";
    }
   }
};




you can take a bunch of variable and store them inside an object using a variable

var sister = {
  name: "Sarah",
  age: 23,
  parents: [ "alice", "andy" ],
  siblings: ["julia"],
  favoriteColor: "purple",
  pets: true
};

INSTEAD OF WRITING OUT EACH VARIABLE Key and value

The syntax you see above is called object-literal notation. There are some important things you need to remember when you're structuring an object literal:
The "key" (representing a property or method name) and its "value" are separated from each other by a colon
The key: value pairs are separated from each other by commas
The entire object is wrapped inside curly braces { }.
And, kind of like how you can look up a word in the dictionary to find its definition, the key in a key:value pair allows you to look up a piece of information about an object. Here's are a couple examples of how you can retrieve information about my sister's parents using the object you created.


// two equivalent ways to use the key to return its value
sister["parents"] // returns [ "alice", "andy" ]
sister.parents // also returns ["alice", "andy"]



What about methods?
The sister object above contains a bunch of properties about my sister, but doesn't really say what my sister does. For instance, let's say my sister likes to paint. You might have a paintPicture() method that returns "Sarah paints a picture!" whenever you call it. The syntax for this is pretty much exactly the same as how you defined the properties of the object. The only difference is, the value in the key:value pair will be a function.
var sister = {



var sister = {
  name: "Sarah",
  age: 23,
  parents: [ "alice", "andy" ],
  siblings: ["julia"],
  favoriteColor: "purple",
  pets: true,
  paintPicture: function() { return "Sarah paints!"; }
};

returns: "Sarah paints!"
and you can access the name of my sister by accessing the name property:
sister.name
Returns: "Sarah"



Given the following user object, what would you use to print the value of the email property

var user = {
  email: "user@example.com",
  firstName: "first",
  lastName: "last"
};

ANSWER:  use bracket or dot notation

console.log(user.email);
console.log(user["email"]);

Select the piece of code that creates an object that describes a red Honda Civic:


ANSWER:
var car = {manufacture:"honda", model="civic",class:"compact",color:"red"};

or
var car = {color:"red", manufacture:"honda", model:"civic", class:"compact"};



Option 1 and 3 both show the properties of the car as key: value pairs inside curly braces. The order the properties are listed in does not matter.
Option 2 is setting variable values for the car, but isn't associating the values with a particular object.
Option 4 is an array with the values describing the car. But, it's unclear what each value represents without the structure of object notation. What does "compact" mean for instance?


Objects are one of the most important data structures in JavaScript. Get ready to see them everywhere!
They have properties (information about the object) and methods (functions or capabilities the object has). Objects are an incredibly powerful data type and you will see them all over the place when working with JavaScript, or any other object-oriented programming language.
Object literals, methods, and properties
You can define objects using object-literal notation:


ou can define objects using object-literal notation:
var myObj = {
  color: "orange",
  shape: "sphere",
  type: "food",
  eat: function() { return "yummy" }
};

myObj.eat(); // method
myObj.color; // property


Naming conventions
Feel free to use upper and lowercase numbers and letters, but don't start your property name with a number. You don't need to wrap the string in quotes! If it's a multi-word property, use camel case. Don't use hyphens in your property names


var richard = {
  "1stSon": true;
  "loves-snow": true;
};


QUIZ
Create a breakfast object to represent the following menu item:
The Lumberjack - $9.95
eggs, sausage, toast, hashbrowns, pancakes
The object should contain properties for the name, price, and ingredients.


var breakfast = {
     name: "The Lumberjack", price:"$9.95", ingredients: ["eggs", "sausage", "toast", "hashbrowns", "pancakes"],

};


console.log(breakfast);



Quiz
Using the given object:

add a printAccountSummary() method that returns the following account message:

Welcome!
Your balance is currently $1000 and your interest rate is 1%.


var savingsAccount = {
    balance: 1000,
    interestRatePercent: 1,
    deposit: function addMoney(amount) {
        if (amount > 0) {
            savingsAccount.balance += amount;
        }
    },
    withdraw: function removeMoney(amount) {
        var verifyBalance = savingsAccount.balance - amount;
        if (amount > 0 && verifyBalance >= 0) {
            savingsAccount.balance -= amount;
        }
    },
    printAccountSummary: function SummaryAccountPrinting() {
            return "Welcome!\nYour balance is currently $1000 and your interest rate is 1%.";
};

console.log(savingsAccount.printAccountSummary());


Your code should have a variable savingsAccount
The variable savingsAccount should be an object
Your savingsAccount object should have a balance property
Your savingsAccount object should have a interestRatePercent property
Your savingsAccount object should have a printAccountSummary() method
Your printAccountSummary() method should return the correct account message

NEW CODE:


printAccountSummary: function SummaryAccountPrinting() {

        return "Welcome!\nYour balance is currently $1000 and your interest rate is 1%.";


Quiz
Using the object from the previous quiz, answer the following quiz question:

Which of the following are valid ways to access properties and call methods from the savingsAccount object?


var savingsAccount = {
  balance: 1000,
  interestRatePercent: 1,
  deposit: function addMoney(amount) {
    if (amount > 0) {
      savingsAccount.balance += amount;
    }
  },
  withdraw: function removeMoney(amount) {
    var verifyBalance = savingsAccount.balance - amount;
    if (amount > 0 && verifyBalance >= 0) {
      savingsAccount.balance -= amount;
    }
  }
};

quiz -

Directions:
Create an object called facebookProfile. The object should have 3 properties:
your name
the number of friends you have, and
an array of messages you've posted (as strings)
The object should also have 4 methods:
postMessage(message) - adds a new message string to the array
deleteMessage(index) - removes the message corresponding to the index provided
addFriend() - increases the friend count by 1
removeFriend() - decreases the friend count by 1


ANSDWER

/*
 * Programming Quiz: Facebook Friends (7-5)
 */

// your code goes here
var facebookProfile = {

    name: "Michele Novack",
    friends: 33,
    messages: ["Hi Their!", "Greetings!", "Good Night!"],

    postMessage: function(message) {

        return facebookProfile.messages.push(message);

    },

    deleteMessage: function(index) {

        return facebookProfile.messages.splice(index,1);

    },

    addFriend: function() {




What Went Well
Your code should have a variable facebookProfile
The variable facebookProfile should be an object
Your facebookProfile object should have a name property
Your facebookProfile object should have a friends property
Your facebookProfile object should have a messages property
Your object's name property should be string
Your object's friends property should be a number
Your object's messages property should be an array
Your facebookProfile object should have a postMessage() method
Your facebookProfile object should have a deleteMessage() method
Your facebookProfile object should have a addFriend() method
Your facebookProfile object should have a removeFriend() method
Your object's postMessage() method should add messages to the messages array
Your object's deleteMessage() method should remove messages from the messages array
Your object's addFriend() method should increment the friends variable
Your object's removeFriend() method should decrement the friends variable


Quiz
Here is an array of donut objects.

se the forEach() method to loop over the array and print out the following donut summaries using console.log.

Jelly donuts cost $1.22 each
Chocolate donuts cost $2.45 each
Cider donuts cost $1.59 each
Boston Cream donuts cost $5.99 each

var donuts = [
  { type: "Jelly", cost: 1.22 },
  { type: "Chocolate", cost: 2.45 },
  { type: "Cider", cost: 1.59 },
  { type: "Boston Cream", cost: 5.99 }
];
// your code goes here

donuts.forEach (function(summaries) {

  console.log(summaries.type + " donuts cost $"+ summaries.cost + " each");

});

Quiz MURDER

For this quiz, you're going to help solve a fictitious murder mystery that happened here at Udacity! A murder mystery is a game typically played at parties wherein one of the partygoers is secretly, and unknowingly, playing a murderer, and the other attendees must determine who among them is the criminal. It's a classic case of whodunnit.
Since this might be your first time playing a murder mystery, we've simplified things quite a bit to make it easier. Here's what we know! In this murder mystery there are:
four rooms: the ballroom, gallery, billiards room, and dining room,
four weapons: poison, a trophy, a pool stick, and a knife,
and four suspects: Mr. Parkes, Ms. Van Cleve, Mrs. Sparr, and Mr. Kalehoff.
We also know that each weapon corresponds to a particular room, so...
the poison belongs to the ballroom,
the trophy belongs to the gallery,
the pool stick belongs to the billiards room,
and the knife belongs to the dining room.
And we know that each suspect was located in a specific room at the time of the murder.
Mr. Parkes was located in the dining room.
Ms. Van Cleve was located in the gallery.
Mrs. Sparr was located in the billiards room.
Mr. Kalehoff was located in the ballroom.
To help solve this mystery, write a combination of conditional statements that:
sets the value of weapon based on the room and
sets the value of solved to true if the value of room matches the suspect's room
Afterwards, use this template to print a message to the console if the mystery was solved:
__________ did it in the __________ with the __________!
What goes into the three blank spaces? You can fill in the blanks with the name of the suspect, the room, and the weapon! For example, an output string may look like:
Mr. Parkes did it in the dining room with the knife!
Be sure to watch out for any extra or missing characters (including spaces and punctuation marks) in your output string as well!
ANSWER:


/*

 * Programming Quiz: Murder Mystery (3-4)

 */



// change the value of `room` and `suspect` to test your code

var room = "dining room";

var suspect = "Mr. Parkes";



var weapon = "";

var solved = false;



if (room === "ballroom" && suspect === "Mr. Kalehoff") {

    weapon = "poison"; solved = true;

} else if (room === "gallery" && suspect === "Ms. Van Cleve") {

    weapon = "trophy"; solved = true;

} else if (room === "billiards room" && suspect === "Mrs. Sparr") {

    weapon = "pool stick"; solved = true;

} else {

    weapon = "knife"; solved = true;

}



if (solved) {

	console.log(suspect + " did it in the " + room + " with the " + weapon + "!");

}
